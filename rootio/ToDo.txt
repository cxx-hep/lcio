
 To Do for ROOT I/O for LCIO 
 ===========================


 - dependency structure of libraries:
   liblcio.so should not depend on ROOT libraries !
   -> can we use a dlopen mechanism a la marlin::ProcessorLoader ?
      
   -> for now simply add ROOT libraries ....


 - LCFactory needs to have mechanism to choose either SIO or RIO 
   -> try to resolve based on filename extension (slcio/rlcio)
   -> implement 'generic decorator' that resolves type at open() ...
 DONE: added LCReader/WriterDecorator.cc
    
 
 - RIOWriter:   write Runheader
 - RIOReader:   read  Runheader


 - develop  pointer mechanism that is based in collection indices and store these
    in order to split the event into branches (SIO blocks)
    -> define templated class RefVec<T> w/ conversion to vector<ptr>
DONE: see IMPL/LCRefVec.h   

  - order collections in the event wrt. order of addCollection() calls
     ( use _colNames vector )
     DONE:


  - handle collections that are not in the first event 
      (branches need to be declared before first write)

 

  - make LCCollection branches subbranches of LCEvent 

  
  - don't flush at the end of writing the event - rather use 'autosave' feature
    TTree::SetAutoSave()
    DONE.


  -  add LCParameters to outout file as soon as problem is fixed in next ROOT release  (5.26.00 )



