---------------------------------------------------------------
 Describes the changes for the different versions/tags of LCIO
---------------------------------------------------------------

============================
  ( fg 20030908 ) 
============================

   - implemented new 'access check' mechanism: 
     removed const methods from data entities using ReadOnlyExceptions instead
     introduced base class AccessChecked  [ C++ only - Java has ILCObject]

   - renamed analyze/update methods to processEvent/modifyEvent and 
     processRunHeader/modifyRunHeader in the LCRun(Event)Listener interfaces
     

--------------------
  to do for release:
--------------------

  - SimCalorimeterHit - MCParticleCont doesn't work
    Java version   -> needs debugging ...

  - additional methods in LCReader specifying the access mode (readNextRunHeader)

  - Exceptions:  -  remove all throw clauses ??
                 -  user documentation 

  - LCCollection::addElement() method
  
  - ...

============================
 v00-07beta ( fg 20030903 ) 
============================

   - first version of user manual ('ant doc.manual' -> ./doc/manual.ps)

   - store Mass instead of Energy for MCParticle ( v > 0.7)
     [ C++ and Java ]

   - added scripts (bash) to call Java examples (bin/runSimJob.sh,...)

   - added integer user extensions (LCIntVec)
     [ C++  and Java ]

   - removed EndOfDataException from LCReader API
     EOF is signaled by null pointers again ( while ( evt=lcRdr->readNextEvent()) != 0)
     -> we only use exceptions to signal errors (and unexpected events)
     [ C++ only ]

   - new class 'CalorimeterHit' for real data 
     same as SimCalorimeterHit except for MCParticle link
     [ Java and C++ ]      

   - some code documentation for the C++ API from doxygen
     
   - modification of build.xml ( now 'ant   '  builds everything)


 

============================
 v00-05beta ( fg 20030613 )
============================

  - new package hep.lcio.data / namespace DATA
    defines pure data contents - this is now the interface that has to implemented
    for writing data with LCIO 
       -> LCWriter uses only this interface

  - added pointer tag to track and calorimeter hits for future reference to those

  - added enpoint to MCParticle

  - new methods in LCCollection addElement(), removeElement(int i)
 
  - new methods in MCParticle: getNumberOfDaughters(), getDaughter(int i)
     replacing getDaughters() and  getEndPoint()
 
  - sio-file extension '.slcio' not required by LCReader any more 
    [C++ only]
  
  - LCWriter::open() if no mode specified an exception is thrown
    if the file already exists
    [C++ only]

  - TrackerHit and CalorimeterHit renamed to SimTrackerHit and SimCalorimeterHit

  - New Exception hierarchy  for C++ according to exceptions used in Java 
 
  - Added some Exceptions to hep.lcio.exceptions (Java)

  - Exceptions in LCWriter interface

  - Exceptions in LCReader interface
    [C++ only] 
 
  - Added new default units GeV, mm, ns to comments/documentation

  
  - new method LCTOOLS::dumpEventDetailed() - prints everything in the event
    (bin/dumpevent simjob.slcio 2 2)
    C++ only (incomplete, TrackerHits and user extensions missing)


  - new method SIOWriter::readStream(int maxRecord)
    [C++ only]


=====================
v00-04  (fg 20030514)
=====================

 - new sio-file extension '.slcio' (enforced by C++ version of LCReader/Writer)

 - introduced append mode for writing in LCWriter::open() 
   (constants LCIO::WRITE_NEW and LCIO::WRITE_APPEND )
   C++ only

 - SIO file buffers are flushed after each record
   
 - small program 'copyfix' added:
   Copies all complete events from a file (that has incomplete  
   records at the end due to a program crash) so the append mechanism can be used 
   to continue the program after the crash, e.g. a long running simulation job.
   
 - new method LCReader::readEvent( evtN, runN ) to access 
   given event ( demonstrating fast skip mechanism - no direct access)
   -> see example dumpevent.cc

 - duplicate event header information is not written any more (neither Java nor C++)
   -> event information always in two consecutive records of sio file:
      LCEventHeader: runNum, evtNum, collection names and types
      LCEvent: the data (collections)

 - compression of files now controled by constants 
   (SLCIO::compression, SIOFactory.compression) - set to true for C++ and Java
  
 - the ant target cpp needs aid.generate as a prerequisite (not automatically 
   included any more)

 - added this file: please document your (major) changes to LCIO here 




=====================
v00-03  (fg 20030509)
=====================

 - no 0's at end of strings

 - flag bits for CalorimeterHits taken into account (also Java version)

 - Java version uses identical block names to C++ (as defined in lcio.xml)

 - small bug fix in Java version of SIO:
   src/java/hep/lcd/io/sio/SIOWriter.java writes record header length (as
   opposed to the record length)
   for this to take effect lcio.jar has to be before sio.jar in your
   classpath - otherwise C++ won't be able to read files generated from
   Java...
   needs to be checked for implications on hep.lcd and (if none) applied 
   to sio.jar

 - Java writes the (duplicate) header also for the event record

 - Old files cannot be read with this version !
