// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

package hep.lcio.event;



import hep.lcio.exceptions.* ;
/** Simple interface to store generic user data.
 * To store your own classes they have to implement
 * this interface.
 *           
                                                                                        
                                                                                  
         
 * @author gaede 
 * @version $Id: LCGenericObject.java,v 1.1 2005-02-28 14:49:50 gaede Exp $
 */

public interface LCGenericObject extends LCObject {

    /** Number of integer values stored in this object.
     */
    public int getNInt();

    /** Number of float values stored in this object.
     */
    public int getNFloat();

    /** Number of double values stored in this object.
     */
    public int getNDouble();

    /** Returns the integer value for the given index.
     */
    public int getIntVal(int index);

    /** Returns the float value for the given index.
     */
    public float getFloatVal(int index);

    /** Returns the double value for the given index.
     */
    public double getDoubleVal(int index);

    /** True if objects of the implementation class have a fixed size, i.e
     * getNInt, getNFloat and getNDouble will return values that are constant during 
     * the lifetime of the object.
     */
    public boolean isFixedSize();

    /** The type name of the user class (typically the class name)
     * This type name is stored as a collection parameter "TypeName" 
     * with every collection of LCGenericObject subclasses.<br>
     * 
     */
    public String getTypeName();

    /** The description string. A comma separated list of pairs of
     *  type identifier, one of 'i','f','d' followed by ':' 
     *  and an attribute name, e.g. "i:cellId,f:offset,f:gain".
     */
    public String getDataDescription();
} // class or interface

