package hep.lcio.data ;

/** Describes a generic calorimeter hit from simulation. Has to be implemented by user 
 *  classes that are to be made persistent.
 * 
 * @author gaede
 * @version Mar 5, 2003
 */

public interface SimCalorimeterHitData extends LCObject {
    
    /**Returns the detector specific (geometrical) cell id.
     */
    public int getCellID0() const ;
    
    /**Returns the second detector specific (geometrical) cell id.
     */
    public int getCellID1() const ;
    
    /** Returns the energy of the hit in [GeV].
     */
    public float getEnergy() const ;
    
    /** Returns the position of the hit in world coordinates.
     *  NULL if information is not stored. 
     */
    public const float3V getPosition() const ;	

    
    /** Returns the number of MC particles that caused the hit - 0 if 
     * information is not stored. Be aware of double counting if PDG
     * for secondaries is stored.
     */
    public int getNMCParticles() const ;

    /** Returns the energy of the i-th particle in [GeV] that contributed to the hit.
     */ 
    public float getEnergyCont(int i) const ;

    /** Returns the time of the i-th in [ns] particle that contributed to the hit.
     *  TODO : definition of time. 
     */ 
    public float getTimeCont(int i) const ;
    
    /** Returns the PDG code of the secondary type of the i-th particle that 
     * contributed to the hit. Ask the flag word (bit CHBIT_PDG) of the collection 
     * wether this information is available. If so, every primary will show up in 
     * the list of contributions once for every type of secondaries. If not the 
     * value returned is undefined. 
     */ 
    public int  getPDGCont(int i) const ;
    
    /** Returns the i-th particle that contributed to the hit.
     */
    public MCParticleData* getParticleContData( int i) const ;


}
