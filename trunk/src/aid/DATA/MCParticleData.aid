package hep.lcio.data ;

@ifdef cpp
@cpp{
#include <vector>
}
@endif

    @ifdef IGNORE // we have to split the cpp stuff - includes should go outside namespace 
    @endif
@ifdef cpp
@cpp{
class MCParticleData ;
typedef std::vector< const MCParticleData*> MCParticleDataVec ;
}
@endif

/** Describes a Monte Carlo particle. Has to be implementet by user classes
 *  that are to be made persistent.
 * 
 * @author gaede
 * @version Mar 5, 2003
 */
public interface MCParticleData extends LCObject {
    

    /** Returns the number of parents of this particle - 0 if mother.
     */
    public int getNumberOfParents() const ;

    /** Returns the i-th parent of this particle.
     */
    public MCParticleData* getParentData(int i) const ;
    
    /** Returns the PDG code of the particle.
     */
    public int getPDG() const;
    
    /** Returns the status for particles from the generator
     * <br> 0  empty line
     * <br> 1  undecayed particle, stable in the generator
     * <br> 2  particle decayed in the generator
     * <br> 3  documentation line
     */
    public int getGeneratorStatus() const ;

    /** Returns the status for particles from the simulation, e.g.
     * decayed in flight. Bit 31 ise reserved for internal use thus the
     * status cannot be negative.
     * FIXME: Needs to be defined.
     */
    public int getSimulatorStatus() const ;

    /** Returns the production vertex of the particle in [mm].
     */
    public const double3V getVertex() const;

    /** Returns the endpoint of the particle in [mm] - returns NULL if
     *  undefined (not set). 
     *  Definition of the enpoint depends on the application that created 
     *  the particle, e.g. the start point of the shower in a calorimeter.
     */
    public const double3V getEndpoint() const;


    /** Returns the particle momentum at the production vertex in [GeV].
     */
    public const float3V getMomentum() const;

    
    /** Returns the mass of the particle in [GeV].
     */
    public float getMass() const;
    
    /** Returns the particle's charge.
     */
    public float getCharge() const;
    
}
