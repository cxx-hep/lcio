package hep.lcio.event ;

@ifdef cpp
@cpp{
class Cluster ;
typedef std::vector<Cluster*> ClusterVec ;
}
@endif

/** The LCIO cluster.
 * 
 * @author gaede
 * @version $Id: Cluster.aid,v 1.7 2004-07-23 10:28:25 gaede Exp $
 */


public interface Cluster extends LCObject {
    
// @ifdef cpp
// @cpp{
//      static const int UNKNOWN =  0 ; 
//      static const int ECAL =  1 ; 
//      static const int HCAL =  2 ; 
//      static const int COMBINED =  3 ; 
//      static const int LAT =  4 ; 
//      static const int LCAL =  5 ;     
//      static const int UNDEFINED =  0 ; 
//      static const int NEUTRAL =  1 ; 
//      static const int CHARGED =  2 ; 
// }
//  @else
//      public static const int UNKNOWN =  0 ; 
//      public const int ECAL =  1 ;     
//      public const int HCAL =  2 ;     
//      public const int COMBINED =  3 ; 
//      public const int LAT =  4 ;      
//      public const int LCAL =  5 ;     
//      public static const int UNDEFINED =  0 ; 
//      public static const int NEUTRAL =  1 ; 
//      public static const int CHARGED =  2 ; 
//  @endif 


    /** Flagword that defines the type of cluster. Bits 0-15 can be used to denote the subdetectors
     *  that have contributed hits to the cluster. The definition of the bits has to be done 
     *  elsewhere, e.g. in the run header. Bits 16-31 are used internally.
     *  @see testType()
     */
    public int  getType() const ;	
    
    /** Returns true if the corresponding bit in the type word is set.
     */
    public boolean testType(int bitIndex ) const ; 

    /** Energy of the cluster.
     */
    public float getEnergy() const ;	

    /** Position of the cluster.
     */
    public const float3V getPosition() const;

    /** Covariance matrix of the position (6 Parameters)
    */
    public const FloatVec& getPositionError() const ;


    /** Intrinsic direction of cluster at position: Theta.
     * Not to be confused with direction cluster is seen from IP.
     */
    public float getITheta() const ;	

    /** Intrinsic direction of cluster at position: Phi.
     * Not to be confused with direction cluster is seen from IP.
     */
    public float getIPhi() const ;	

    /** Covariance matrix of the direction (3 Parameters)
     */
    public const FloatVec& getDirectionError() const ;

    /** Shape parameters (6 Parameters) - TO DO: definition
     */
    public const FloatVec& getShape() const ;

    /** Type hypotheses: 3 Parameters: compatible with EM, HAD, muon cluster
     */
    public const FloatVec& getParticleType() const ;

    /** The clusters that have been combined to this cluster.
     */
    public const ClusterVec& getClusters() const ; 

    /** The hits that have been combined to this cluster.
     *  Only available if CalorimeterHit objects have been saved with
     *  LCIO::RCHBIT_PTR==1.
     *  @see CalorimeterHit
     */
    public const CalorimeterHitVec& getCalorimeterHits() const ;

    /** Returns the energy contribution of the hits 
     *  Runs parallel to the CalorimeterHitVec from getCalorimeterHits()
     */
    public const FloatVec& getHitContributions() const ;


    /** A vector that holds the energy observed in a particular subdetectors.
     *  The mapping of indices to subdetectors is implementation dependent.
     *  To be used as convenient information or if hits are not stored in 
     *  the data set, e.g. DST or FastMC. 
     *  TODO:  Provide way to store mapping in event/run header.
     */
    public const FloatVec& getSubdetectorEnergies() const ;


}
