package hep.lcio.event;
@ifdef cpp
@cpp{
class Track ;
typedef std::vector<Track*> TrackVec ;
}
@endif

/** The LCIO track.
 * 
 * @author gaede
 * @version $Id: Track.aid,v 1.11 2004-09-10 12:26:18 gaede Exp $
 */

public interface Track extends LCObject {
    

    /** Flagword that defines the type of track. Bits 0-15 can be used to denote the subdetectors
     *  that have contributed hits used in the track fit.  For the definition of the bits 
     *  check/Set the collection variables TrackTypeBitNames and TrackTypeBitIndices.
     *  </br>Bits 16-31 are used internally.
     */
    public  int  getType() const ;	
    
    /** Impact paramter of the track
     *  in (r-phi).
     */
    public float getD0() const ;	
    
    /** Phi of the track at the reference point.
     * @see getReferencePoint
     */
    public float getPhi() const ;	
    
    /** Omega is the signed curvature of the track in [1/mm].
     * The sign is that of the particle's charge.
     */
    public float getOmega() const ;	
    
    /** Impact paramter of the track
     *  in (r-z).
     */
    public float getZ0() const ;	
    
    /** Lambda is the dip angle of the track in r-z at the reference point. 
     * @see getReferencePoint
     */
    public float getTanLambda() const ;	
    
    
    /** Covariance matrix of the track parameters. Stored as lower triangle matrix where
     * the order of parameters is:   d0, phi, omega, z0, tan(lambda).
     * So we have cov(d0,d0), cov( phi, d0 ), cov( phi, phi), ...
     */
    public const FloatVec& getCovMatrix() const ;
    
    
    /** Reference point of the track parameters.
     *  The default for the reference point is the point of closest approach.
     *  @see isReferencPointPCA() 
     */
    public const float3V getReferencePoint() const;
    
    /** True if the reference point is the point of closest approach.
     */
    public boolean isReferencePointPCA() const ;
    
    /** Chi^2 of the track fit.
     */
    public float getChi2() const ;	

    /** Number of degrees of freedom  of the track fit.
     */
    public int getNdf() const ;	


    /** dEdx of the track.
     */
    public float getdEdx() const ;	

    /** Error of dEdx.
     */
    public float getdEdxError() const ;	


    /** The radius of the innermost hit that has been used in the track fit.
     *  Helps to detect V0 tracks with small impact paramters or heavy mesons.
     *  To be used as convenient information or if hits are not stored in 
     *  the data set, e.g. DST or FastMC. 
     */
    public float getRadiusOfInnermostHit() const ;


    /** A vector that holds the number of hits in particular subdetectors.
     *  The mapping of indices to subdetectors is implementation dependent.
     *  To be used as convenient information or if hits are not stored in 
     *  the data set, e.g. DST or FastMC. 
     *  Check/set collection variable TrackSubdetectorNames for decoding the indices.
     */
    public const IntVec& getSubdetectorHitNumbers() const ;


    /** The tracks that have been combined to this track.
     */
    public const TrackVec& getTracks() const ; 


    /** The hits that have been used to create this track.
     */
    public const TrackerHitVec& getTrackerHits() const ;

}
