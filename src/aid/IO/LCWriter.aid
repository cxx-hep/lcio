package hep.lcio.io;
@java{
import hep.lcio.exceptions.* ;
}

/**Interface for writing data with LCIO. Uses only interfaces 
 * from DATA/hep.lcio.data.
 * Use LCFactory to instantiate a corresponding LCWriter object
 * for the output format at hand (SIO only, so far).
 *
 * @see LCFactory
 * @author gaede
 * @version Mar 4, 2003
 * fg 20030609 added exceptions; using data interface only.
 */
public interface LCWriter {

    /** Opens a file for writing. If file with given name exists, 
     * an exception is thrown. Use append or new mode instead.
     *
     *@throws IOException
     */
    public void open(const String& filename ) throws IOException ,DataNotAvailableException ;

    /** Opens a file for writing.
     * Possible write modes are: LCIO::WRITE_NEW
     * (existing files are replaced) and LCIO::WRITE_APPEND. 
     *
     *@throws IOException
     */
    public void open(const String& filename , int writeMode ) throws IOException ;

    
    /** Writes the given run header to file.
     *
     *@throws IOException
     */
    public void writeRunHeader(const LCRunHeaderData*  hdr) throws IOException ;

    /** Writes the given event to file.
     *
     *@throws IOException
     */
    public void writeEvent(const LCEventData*  evt) throws IOException ;
    
    /** Closes the output file/stream.
     *
     *@throws IOException
     */
    public void close() throws IOException ;
    
}
