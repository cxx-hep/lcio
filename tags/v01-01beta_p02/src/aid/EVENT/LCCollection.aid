package hep.lcio.event ;

@java{
import hep.lcio.exceptions.* ;
}
/** The generic collection used in LCIO. Holds objects of type LCObject.
 * 
 * @author gaede 
 * @version Mar 4, 2003
 * @see LCObject
 * @see LCIO
 */
@ifdef java
public interface LCCollection extends java.util.List
@else
public interface LCCollection
@endif
{
    /**Returns the number of elements in the collection.
     */
    public int getNumberOfElements() const ;
    
    /** Returns the type name of the collection - valid names are defined in LCIO.
     */
    public const String& getTypeName() const ;
    
    /** Returns pointer to element at index - no range check, use getNumberOfEntries().
     */
    public LCObject* getElementAt(int index) const ;

    /** Returns flag word for collection. Bits 16-31 are reserved for LCIO
     *  Depending on the object type stored they have a special meaning, e.g. 
     *  for SimCalorimeterHits: <br>
     *  CHBIT_LONG = 31   -  store position <br>
     *  CHBIT_BARREL = 30 -  endcap or barrel <br>
     *  CHBIT_ID1 = 29 -   cellid1 is sored <br>
     *  CHBIT_PDG = 28 - store pdg of secondaries <br>
     *  Bits 0-15 are subdetector/user specific.
     */
    public int getFlag() const ;

    /** Adds the given element to (end of) the collection. Throws an exception 
     * if the collection (event) is 'read only'.
     *
     * @throws ReadOnlyException
     */
    public void addElement(LCObject* obj) throws ReadOnlyException ;
    
    
    /** Removes the i-th element from the collection. Throws an exception 
     * if the collection (event) is 'read only'.
     *
     * @throws ReadOnlyException
     */
    public void removeElementAt(int i) throws ReadOnlyException ;
    

    /** Set the flag word. This is allowed in 'read only' mode.
     */
    public void setFlag(int flag)  ;

}

