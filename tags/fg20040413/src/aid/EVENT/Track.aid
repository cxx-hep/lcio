package hep.lcio.event;
@ifdef cpp
@cpp{
class Track ;
typedef std::vector<Track*> TrackVec ;
}
@endif

/** The LCIO track.
 * 
 * @author gaede
 * @version Mar 15, 2004
 */

public interface Track extends LCObject {
    

@ifdef cpp
@cpp{
  public:
    static const int UNKNOWN =  0 ; 
    static const int VTX =  1 ; 
    static const int FTD =  2 ; 
    static const int SIT =  3 ; 
    static const int TPC =  4 ; 
    static const int MUON =  5 ; 
    static const int FULL =  6 ; 

}
@else
    public static const int UNKNOWN =  0 ; 
    public static const int VTX =  1 ; 
    public static const int FTD =  2 ; 
    public static const int SIT =  3 ; 
    public static const int TPC =  4 ; 
    public static const int MUON =  5 ; 
    public static const int FULL =  6 ; 
@endif


    /** Type of track, i.e. the subdetector(s) used to derive the track paramters: <br>
     *  Track::UNKNOWN <br> 
     *  Track::VTX <br> 
     *  Track::FTD <br> 
     *  Track::SIT <br> 
     *  Track::TPC <br> 
     *  Track::MUON <br> 
     *  Track::FULL <br> 
     */
    public int getType() const ;	
    
    /** The magnitude of the track's momentum,
     *  signed by the charge.
     */
    public float getMomentum() const ;	
    
    /** Theta of the  track.
     */
    public float getTheta() const ;	

    /** Phi of the track.
     */
    public float getPhi() const ;	


    /** Impact paramter of the track
     *  in (r-phi).
     */
    public float getD0() const ;	


    /** Impact paramter of the track
     *  in (r-z).
     */
    public float getZ0() const ;	

 
    /** Covariance matrix of the track parameters.
     */
    public const FloatVec& getCovMatrix() const ;


    /** Reference point of the track parameters.
     */
    public const float3V getReferencePoint() const;
    
    
    /** Chi^2 of the track fit.
     */
    public float getChi2() const ;	

    /** dEdx of the track.
     */
    public float getdEdx() const ;	

    /** Error of dEdx.
     */
    public float getdEdxError() const ;	


    /** The tracks that have been combined to this track.
     */
    public const TrackVec& getTracks() const ; 


    /** Returns the names of the hit collections that have been
     *  used to create the track.
     */
    public const StringVec&  getHitCollectionNames() const ;
    

    /** Returns all hit indices for the given collection name.
     */
    public const IntVec& getHitIndicesForCollection(const String& colName ) const ;






}
